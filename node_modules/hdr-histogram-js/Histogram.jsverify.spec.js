"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * This is a TypeScript port of the original Java version, which was written by
 * Gil Tene as described in
 * https://github.com/HdrHistogram/HdrHistogram
 * and released to the public domain, as explained at
 * http://creativecommons.org/publicdomain/zero/1.0/
 */
var chai_1 = require("chai");
var jsc = require("jsverify");
var hdr = require("./index");
var runFromStryker = __dirname.includes("stryker");
var checkOptions = {
    rngState: "0559a70d12fe8436cb",
    tests: runFromStryker ? 10 : 1000
};
describe("Histogram percentile computation", function () {
    it("should be accurate according to its significant figures", function () {
        var numberOfSignificantValueDigits = 3;
        [8, 16, 32, 64].forEach(function (bitBucketSize) {
            var histogram = hdr.build({
                bitBucketSize: bitBucketSize,
                numberOfSignificantValueDigits: numberOfSignificantValueDigits
            });
            var property = jsc.check(jsc.forall(arbData(100), function (numbers) {
                histogram.reset();
                numbers.forEach(function (n) { return histogram.recordValue(n); });
                var actual = quantile(numbers, 90);
                var got = histogram.getValueAtPercentile(90);
                var relativeError = 1 - got / actual;
                var variation = Math.pow(10, -numberOfSignificantValueDigits);
                return relativeError < variation;
            }), checkOptions);
            chai_1.expect(property).to.be.true;
        });
    });
});
describe("Histogram encoding/decoding", function () {
    it("should keep all data after an encoding/decoding roundtrip", function () {
        var numberOfSignificantValueDigits = 3;
        [8, 16, 32, 64].forEach(function (bitBucketSize) {
            var property = jsc.check(jsc.forall(arbData(1), arbPercentiles(), function (numbers, percentiles) {
                var histogram = hdr.build({
                    bitBucketSize: bitBucketSize,
                    numberOfSignificantValueDigits: numberOfSignificantValueDigits
                });
                numbers.forEach(function (n) { return histogram.recordValue(n); });
                var encodedHistogram = hdr.encodeIntoBase64String(histogram);
                var decodedHistogram = hdr.decodeFromCompressedBase64(encodedHistogram);
                return percentiles.every(function (percentile) {
                    var actual = histogram.getValueAtPercentile(percentile);
                    var got = decodedHistogram.getValueAtPercentile(percentile);
                    return actual === got;
                });
            }), checkOptions);
            chai_1.expect(property).to.be.true;
        });
    });
});
var arbData = function (size) {
    var replicate = function (n, g) { return jsc.tuple(new Array(n).fill(g)); };
    return jsc.nonshrink(replicate(size, jsc.oneof([
        // we want values with a high range
        jsc.integer(1, 100),
        jsc.integer(100000, Number.MAX_SAFE_INTEGER)
    ])));
};
var arbPercentiles = function () { return jsc.array(jsc.number(50, 99.999)); };
// reference implementation
var quantile = function (inputData, percentile) {
    var data = inputData.slice().sort();
    var index = percentile / 100 * (data.length - 1);
    var result;
    if (Math.floor(index) === index) {
        result = data[index];
    }
    else {
        var i = Math.floor(index);
        var fraction = index - i;
        result = data[i] + (data[i + 1] - data[i]) * fraction;
    }
    return result;
};
//# sourceMappingURL=Histogram.jsverify.spec.js.map